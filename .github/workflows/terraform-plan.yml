name: "Terraform Plan"

on:
#  pull_request:
  push:
    branches:
      - main


env:
  TF_CLOUD_ORGANIZATION: "mark_j_brownlee"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "learn-terraform-github-actions"
  CONFIG_DIRECTORY: "./"

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    # Set the environment based on the target branch to allow us to reference appropriate environment variables. 
    environment:
      name: ${{ github.ref_name }}    
    permissions:
      contents: read
      pull-requests: write
    strategy:
      matrix:
        location: ['AWSComponent1', 'AWSComponent2', 'AWSComponent3']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Terraform/AWS Environment
        run: echo $ {{ vars.TFRESOURCESUFFIX }}
        
      - id: set-branch-env
        name: Set Environment for branch
        run: |
          if [[ ${{ github.ref_name }}  == 'main' ]]; then
            echo "branch-env=development" >> "${GITHUB_OUTPUT}"
          elif [[ ${{ github.ref_name }}  == 'prod-branch' ]]; then
            echo "branch-env=production" >> "${GITHUB_OUTPUT}"
            else
            echo "branch-env=uat" >> "${GITHUB_OUTPUT}"
          fi

      - name: Check Terraform/AWS environment
        run: echo "Terraform/AWS environment -> ${{ steps.set-branch-env.outputs.branch-env }}" 

      - name: Detect Changes in Directories
        uses: dorny/paths-filter@v2.11.1
        id: changes
        with:
          list-files: 'json'
          filters: |
            AWSComponent1:
              - 'app/AWSComponent1/**'
              - 'infrastructure/AWSComponent1/**'
            AWSComponent2:
              - 'app/AWSComponent2/**'
              - 'infrastructure/AWSComponent2/**'
            AWSComponent3:
              - 'app/AWSComponent3/**'
              - 'infrastructure/AWSComponent3/**'
    
      - name: Print Changes
        run: echo ${{ steps.changes.outputs[matrix.location] }}

      - name: Print True
        run: echo ${{ steps.changes.outputs[matrix.location] == 'true' }} 

      # Set Terraform variables that are defined in variables.tf - https://github.com/hashicorp/setup-terraform/issues/35#issuecomment-689073412
      - name: Setup Terraform variables
        if: ${{ steps.changes.outputs[matrix.location] == 'true' }}
        id: vars
        run: |-
          cd infrastructure/${{ matrix.location }}
          cat > pipeline.auto.tfvars <<EOF
          environment = "${{ github.ref_name }}"
          EOF

      - name: Upload Configuration
        if: ${{ steps.changes.outputs[matrix.location] == 'true' }}
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ matrix.location }}-${{ steps.set-branch-env.outputs.branch-env }} # change this once it's working
          directory: infrastructure/${{ matrix.location }}
          speculative: true

      - name: Create Plan Run
        if: ${{ steps.changes.outputs[matrix.location] == 'true' }}
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0 
        id: plan-run
        with:
          workspace: ${{ matrix.location }}-${{ steps.set-branch-env.outputs.branch-env }} # change this once it's working
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        if: ${{ steps.changes.outputs[matrix.location] == 'true' }}
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}
      - name: Update PR
        if: ${{ steps.changes.outputs[matrix.location] == 'true' }}
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
                \`\`\`
                Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                \`\`\`
                [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
                `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

      # - name: Upload Configuration
      #   uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
      #   id: plan-upload
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     directory: ${{ env.CONFIG_DIRECTORY }}
      #     speculative: true

      # - name: Create Plan Run
      #   uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
      #   id: plan-run
      #   with:
      #     workspace: ${{ env.TF_WORKSPACE }}
      #     configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
      #     plan_only: true

      # - name: Get Plan Output
      #   uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
      #   id: plan-output
      #   with:
      #     plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # - name: Update PR
      #   uses: actions/github-script@v6
      #   id: plan-comment
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       // 1. Retrieve existing bot comments for the PR
      #       const { data: comments } = await github.rest.issues.listComments({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         issue_number: context.issue.number,
      #       });
      #       const botComment = comments.find(comment => {
      #         return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
      #       });
      #       const output = `#### Terraform Cloud Plan Output
      #          \`\`\`
      #          Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
      #          \`\`\`
      #          [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
      #          `;
      #       // 3. Delete previous comment so PR timeline makes sense
      #       if (botComment) {
      #         github.rest.issues.deleteComment({
      #           owner: context.repo.owner,
      #           repo: context.repo.repo,
      #           comment_id: botComment.id,
      #         });
      #       }
      #       github.rest.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       });
